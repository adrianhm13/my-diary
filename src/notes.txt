1. Pages and routes
2. Navbar
    Import bootstrap, create scss file to modify variables and import it into index.js
3. Login/Signup Forms
4. Setting up database and auth from firestore
5. Creating useSignup hook
6. Creating useAuthContext hook
    1. AuthContext.js with the provider and wrapping the children, Reducer function to update state of user, and createContext to add the value to the provider
    2. useAuth.js to consume that context and return it, so we have access to the dispatch function and value from the context/reducer
7. Login action
    1. Add the case of Login in the reducer function within AuthContext
    2. In the useSignup hook, we import the useAuthContext hook (which has access to the dispatch function after using useContext)
    3. Desctructure dispatch from useAuthContext so we can use it after signup the user so the user it's login
8. Logout hook
    1. useLogout hook, inside we declare an async function where we log out the user with the method .signOut() (imported from proyectAuth, config file of Firestore)
    2. Return the function logout, error, isPending so we can use it wherever we want
    3. We import the hook into the navbar to logout
9. Cleanup functions
    Explanation: if we are in the process of signin a new user and we click in another link, 
    the process it's still loading and that leds an error, because it's trying to process it while the component it's unmounted

    1. Create another state to see if it's cancelled, we use useEffect(() => {}, []) with a return setting the cancelled state to true.
    This way when we click the button with the logout function, the component re-renders (the hook) so the state it's true, and therefore will not update the error
    and isPending states.

    "useEffect's clean-up runs after the next render, before the next useEffect." https://maxrozen.com/demystifying-useeffect-cleanup-function
10. Login hook
    1. Really similar to logout, but the function .signInWithCredentials... it will take the email/password parameters and it returns a response,
    We can use this response to dispatch the action with payload response.user













/// IDEAS

Write and choose the date as the user wish, and also filter by date